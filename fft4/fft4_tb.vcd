$date
	Wed Nov 06 10:04:17 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fft4_tb $end
$var wire 10 ! y3_real [9:0] $end
$var wire 10 " y3_imag [9:0] $end
$var wire 10 # y2_real [9:0] $end
$var wire 10 $ y2_imag [9:0] $end
$var wire 10 % y1_real [9:0] $end
$var wire 10 & y1_imag [9:0] $end
$var wire 10 ' y0_real [9:0] $end
$var wire 10 ( y0_imag [9:0] $end
$var wire 1 ) valid $end
$var parameter 32 * DATA_WIDTH $end
$var reg 1 + clk $end
$var reg 8 , x0_imag [7:0] $end
$var reg 8 - x0_real [7:0] $end
$var reg 8 . x1_imag [7:0] $end
$var reg 8 / x1_real [7:0] $end
$var reg 8 0 x2_imag [7:0] $end
$var reg 8 1 x2_real [7:0] $end
$var reg 8 2 x3_imag [7:0] $end
$var reg 8 3 x3_real [7:0] $end
$scope module fft4_inst $end
$var wire 1 + clk $end
$var wire 1 4 en $end
$var wire 8 5 in0_imag [7:0] $end
$var wire 8 6 in0_real [7:0] $end
$var wire 8 7 in1_imag [7:0] $end
$var wire 8 8 in1_real [7:0] $end
$var wire 8 9 in2_imag [7:0] $end
$var wire 8 : in2_real [7:0] $end
$var wire 8 ; in3_imag [7:0] $end
$var wire 8 < in3_real [7:0] $end
$var wire 10 = out0_imag [9:0] $end
$var wire 10 > out0_real [9:0] $end
$var wire 10 ? out1_imag [9:0] $end
$var wire 10 @ out1_real [9:0] $end
$var wire 10 A out2_imag [9:0] $end
$var wire 10 B out2_real [9:0] $end
$var wire 10 C out3_imag [9:0] $end
$var wire 10 D out3_real [9:0] $end
$var wire 1 E rst_n $end
$var wire 1 F valid $end
$var wire 1 ) yout_valid $end
$var parameter 32 G DATA_WIDTH $end
$var parameter 32 H EXPAND $end
$var parameter 32 I POINTS $end
$scope module butterfly_unit_0_0 $end
$var wire 1 + clk $end
$var wire 1 J en $end
$var wire 8 K in1_imag [7:0] $end
$var wire 8 L in1_real [7:0] $end
$var wire 8 M in2_imag [7:0] $end
$var wire 8 N in2_real [7:0] $end
$var wire 11 O ro_imag [10:0] $end
$var wire 11 P ro_real [10:0] $end
$var wire 1 E rst_n $end
$var wire 1 Q valid $end
$var wire 9 R out2_real [8:0] $end
$var wire 9 S out2_imag [8:0] $end
$var wire 9 T out1_real [8:0] $end
$var wire 9 U out1_imag [8:0] $end
$var parameter 32 V DATA_WIDTH $end
$var parameter 32 W EXPAND $end
$var parameter 32 X PRECISION $end
$var reg 5 Y en_r [4:0] $end
$var reg 20 Z in1_imag_d [19:0] $end
$var reg 20 [ in1_imag_d1 [19:0] $end
$var reg 20 \ in1_real_d [19:0] $end
$var reg 20 ] in1_real_d1 [19:0] $end
$var reg 20 ^ out1_imag_r [19:0] $end
$var reg 20 _ out1_real_r [19:0] $end
$var reg 20 ` out2_imag_r [19:0] $end
$var reg 20 a out2_real_r [19:0] $end
$var reg 20 b rod_imag [19:0] $end
$var reg 20 c rod_imag_0 [19:0] $end
$var reg 20 d rod_imag_1 [19:0] $end
$var reg 20 e rod_real [19:0] $end
$var reg 20 f rod_real_0 [19:0] $end
$var reg 20 g rod_real_1 [19:0] $end
$upscope $end
$scope module butterfly_unit_0_1 $end
$var wire 1 + clk $end
$var wire 1 h en $end
$var wire 8 i in1_imag [7:0] $end
$var wire 8 j in1_real [7:0] $end
$var wire 8 k in2_imag [7:0] $end
$var wire 8 l in2_real [7:0] $end
$var wire 11 m ro_imag [10:0] $end
$var wire 11 n ro_real [10:0] $end
$var wire 1 E rst_n $end
$var wire 1 o valid $end
$var wire 9 p out2_real [8:0] $end
$var wire 9 q out2_imag [8:0] $end
$var wire 9 r out1_real [8:0] $end
$var wire 9 s out1_imag [8:0] $end
$var parameter 32 t DATA_WIDTH $end
$var parameter 32 u EXPAND $end
$var parameter 32 v PRECISION $end
$var reg 5 w en_r [4:0] $end
$var reg 20 x in1_imag_d [19:0] $end
$var reg 20 y in1_imag_d1 [19:0] $end
$var reg 20 z in1_real_d [19:0] $end
$var reg 20 { in1_real_d1 [19:0] $end
$var reg 20 | out1_imag_r [19:0] $end
$var reg 20 } out1_real_r [19:0] $end
$var reg 20 ~ out2_imag_r [19:0] $end
$var reg 20 !" out2_real_r [19:0] $end
$var reg 20 "" rod_imag [19:0] $end
$var reg 20 #" rod_imag_0 [19:0] $end
$var reg 20 $" rod_imag_1 [19:0] $end
$var reg 20 %" rod_real [19:0] $end
$var reg 20 &" rod_real_0 [19:0] $end
$var reg 20 '" rod_real_1 [19:0] $end
$upscope $end
$scope module butterfly_unit_1_0 $end
$var wire 1 + clk $end
$var wire 1 (" en $end
$var wire 9 )" in1_imag [8:0] $end
$var wire 9 *" in1_real [8:0] $end
$var wire 9 +" in2_imag [8:0] $end
$var wire 9 ," in2_real [8:0] $end
$var wire 11 -" ro_imag [10:0] $end
$var wire 11 ." ro_real [10:0] $end
$var wire 1 E rst_n $end
$var wire 1 /" valid $end
$var wire 10 0" out2_real [9:0] $end
$var wire 10 1" out2_imag [9:0] $end
$var wire 10 2" out1_real [9:0] $end
$var wire 10 3" out1_imag [9:0] $end
$var parameter 33 4" DATA_WIDTH $end
$var parameter 32 5" EXPAND $end
$var parameter 32 6" PRECISION $end
$var reg 5 7" en_r [4:0] $end
$var reg 21 8" in1_imag_d [20:0] $end
$var reg 21 9" in1_imag_d1 [20:0] $end
$var reg 21 :" in1_real_d [20:0] $end
$var reg 21 ;" in1_real_d1 [20:0] $end
$var reg 21 <" out1_imag_r [20:0] $end
$var reg 21 =" out1_real_r [20:0] $end
$var reg 21 >" out2_imag_r [20:0] $end
$var reg 21 ?" out2_real_r [20:0] $end
$var reg 21 @" rod_imag [20:0] $end
$var reg 21 A" rod_imag_0 [20:0] $end
$var reg 21 B" rod_imag_1 [20:0] $end
$var reg 21 C" rod_real [20:0] $end
$var reg 21 D" rod_real_0 [20:0] $end
$var reg 21 E" rod_real_1 [20:0] $end
$upscope $end
$scope module butterfly_unit_1_1 $end
$var wire 1 + clk $end
$var wire 1 F" en $end
$var wire 9 G" in1_imag [8:0] $end
$var wire 9 H" in1_real [8:0] $end
$var wire 9 I" in2_imag [8:0] $end
$var wire 9 J" in2_real [8:0] $end
$var wire 11 K" ro_imag [10:0] $end
$var wire 11 L" ro_real [10:0] $end
$var wire 1 E rst_n $end
$var wire 1 M" valid $end
$var wire 10 N" out2_real [9:0] $end
$var wire 10 O" out2_imag [9:0] $end
$var wire 10 P" out1_real [9:0] $end
$var wire 10 Q" out1_imag [9:0] $end
$var parameter 33 R" DATA_WIDTH $end
$var parameter 32 S" EXPAND $end
$var parameter 32 T" PRECISION $end
$var reg 5 U" en_r [4:0] $end
$var reg 21 V" in1_imag_d [20:0] $end
$var reg 21 W" in1_imag_d1 [20:0] $end
$var reg 21 X" in1_real_d [20:0] $end
$var reg 21 Y" in1_real_d1 [20:0] $end
$var reg 21 Z" out1_imag_r [20:0] $end
$var reg 21 [" out1_real_r [20:0] $end
$var reg 21 \" out2_imag_r [20:0] $end
$var reg 21 ]" out2_real_r [20:0] $end
$var reg 21 ^" rod_imag [20:0] $end
$var reg 21 _" rod_imag_0 [20:0] $end
$var reg 21 `" rod_imag_1 [20:0] $end
$var reg 21 a" rod_real [20:0] $end
$var reg 21 b" rod_real_0 [20:0] $end
$var reg 21 c" rod_real_1 [20:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11 T"
b1001 S"
b1001 R"
b11 6"
b1001 5"
b1001 4"
b11 v
b1001 u
b1000 t
b11 X
b1001 W
b1000 V
b100 I
b1001 H
b1000 G
b1000 *
$end
#0
$dumpvars
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx Q"
bx P"
bx O"
bx N"
xM"
b0 L"
b11000000000 K"
bx J"
bx I"
bx H"
bx G"
xF"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 3"
bx 2"
bx 1"
bx 0"
x/"
b1000000000 ."
b0 -"
bx ,"
bx +"
bx *"
bx )"
x("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx s
bx r
bx q
bx p
xo
b1000000000 n
b0 m
b11 l
b0 k
b10 j
b0 i
1h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx U
bx T
bx S
bx R
xQ
b1000000000 P
b0 O
b11111111 N
b0 M
b1 L
b0 K
1J
xF
1E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
b11 <
b0 ;
b11111111 :
b0 9
b10 8
b0 7
b1 6
b0 5
14
b11 3
b0 2
b11111111 1
b0 0
b10 /
b0 .
b1 -
b0 ,
0+
x)
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5
bx1 Y
b0 Z
b1000000000 \
b0 d
b0 c
b0 g
b11111111111000000000 f
bx1 w
b0 x
b10000000000 z
b0 $"
b0 #"
b0 '"
b11000000000 &"
1+
#10
0+
#15
b0 ""
b11000000000 %"
b0 y
b10000000000 {
bx11 w
b0 b
b11111111111000000000 e
b0 [
b1000000000 ]
bx11 Y
1+
#20
0+
#25
1("
1Q
b0 S
b0 G"
b10 R
b10 H"
b0 U
b0 )"
b0 T
b0 *"
1F"
1o
b0 q
b0 I"
b111111111 p
b111111111 J"
b0 s
b0 +"
b101 r
b101 ,"
bx111 Y
b0 `
b10000000000 a
b0 ^
b0 _
bx111 w
b0 ~
b11111111111000000000 !"
b0 |
b101000000000 }
1+
#30
0+
#35
b0 V"
b10000000000 X"
b0 `"
b1000000000 _"
b0 c"
b0 b"
bx1 U"
b0 8"
b0 :"
b0 B"
b0 A"
b0 E"
b101000000000 D"
bx1 7"
bx1111 w
bx1111 Y
1+
#40
0+
#45
b11111 Y
b11111 w
bx11 7"
b0 @"
b101000000000 C"
b0 9"
b0 ;"
bx11 U"
b1000000000 ^"
b0 a"
b0 W"
b10000000000 Y"
1+
#50
0+
#55
b1111111111 "
b1111111111 C
b1111111111 O"
b10 !
b10 D
b10 N"
b1 &
b1 ?
b1 Q"
b10 %
b10 @
b10 P"
1)
1F
1M"
b0 $
b0 A
b0 1"
b1111111011 #
b1111111011 B
b1111111011 0"
b0 (
b0 =
b0 3"
b101 '
b101 >
b101 2"
1/"
b111111111111000000000 \"
b10000000000 ]"
b1000000000 Z"
b10000000000 ["
bx111 U"
b0 >"
b111111111011000000000 ?"
b0 <"
b101000000000 ="
bx111 7"
1+
#60
0+
#65
bx1111 7"
bx1111 U"
1+
#70
0+
#75
b11111 U"
b11111 7"
1+
#80
0+
#85
1+
#90
0+
#95
1+
#100
0+
